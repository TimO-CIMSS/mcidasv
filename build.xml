<?xml version="1.0"?>

<!-- $Id$ -->

<project name="mcidasv" default="info">

	<!-- directory definitions -->
	<property name="basedir" location="."/>
    <property name="builddir" location="${basedir}/build"/>   
	<property name="distdir" location="${basedir}/dist"/>
	<property name="libdir" location="${basedir}/../idv/lib"/>
	<property name="docdir" location="${basedir}/doc"/>
    <property name="resourcedir" location="${basedir}/edu/wisc/ssec/mcidasv/resources"/>   
	<property name="javadoc.dir" location="${docdir}/javadoc"/>
	<property name="release.dir" location="${basedir}/release"/>
	<property name="webstart.dir" location="${release.dir}/webstart"/>
	<property name="sm.dir" location="${basedir}/edu/wisc/ssec/mcidasv/startupmanager"/>

	<!-- required library jarfile names -->
	<property name="visad.jar" value="visad.jar"/>
	<property name="idv.jar" value="idv.jar"/>

    <property name="ver.props" value="${resourcedir}/version.properties"/>
    <property name="build.props" value="${resourcedir}/build.properties"/>
    
	<!-- jarfile names -->
	<property name="app.jarname" value="mcidasv.jar"/>
    <property name="doc.jarname" value="mcidasv_docs.jar"/>

	<!-- jar signing -->
	<property name="webstart.dir" location="${basedir}/webstart"/>
	<property name="keystore" location="${basedir}/release/mcv-keystore"/>
	<property name="keyalias" value="McIDAS-V"/>
	
	<!-- main class for jar and run targets -->
	<property name="app.mainclass" value="edu.wisc.ssec.mcidasv.McIDASV"/>

	<!-- main class for Startup Manager -->
	<property name="app.smclass" value="edu.wisc.ssec.mcidasv.startupmanager.StartupManager"/>
	<property name="app.smjar" value="startupmanager.jar"/>
	
	<!-- run target options -->
	<property name="run.maxheap" value="256m"/>

    <!-- nightly build props -->
    <property name="cvsroot" value="${user.name}@cvs.ssec.wisc.edu:/cvsroot"/>
    <property name="cvsrsh" value="ssh"/>

	<!-- compiler options -->
	<property name="debug.flag" value="true"/>
	<property name="deprecation.flag" value="false"/>
	<property name="source.ver" value="1.5"/>
	<property name="target.ver" value="1.5"/>
	
    <!-- which warnings to show, use javac -X for help -->
    <property name="xlint" value="deprecation"/>

	<!-- javadoc options -->
	<property name="javadoc.level" value="private"/>

    <fileset id="idv.libs" dir="${libdir}">
        <include name="auxdata.jar"/>
        <include name="local-visad.jar"/>
        <include name="visad.jar"/>
        <include name="jython.jar"/>
        <include name="external.jar"/>
        <include name="nc2.2.jar"/>
        <include name="idv.jar"/>
    </fileset>
    
	<!-- shared classpath -->
	<path id="app.classpath">
		<fileset refid="idv.libs"/>
		<pathelement location="${basedir}"/>
	</path>

	<!-- files to include in application jar -->
	<patternset id="jar.includes">
		<include name="edu/**/*.class"/>
		<include name="edu/**/resources/**/*"/>
		<include name="edu/**/images/**/*"/>
	</patternset>
	
	<!-- Similarly, files to include in the startup manager jar. -->
	<patternset id="startupmanager.includes">
		<include name="edu/**/startupmanager/*.class"/>
		<include name="edu/**/startupmanager/resources/**/*"/>
		<include name="edu/**/persistbox/**/*"/>
		<include name="edu/**/images/mcidasv_logo.gif"/>
	</patternset>
    
	<!-- just print out some of the setting for this build file -->
	<target name="info" description="Print various significant property values">
		<echo>
== ANT ======================= 
ant java version: ${ant.java.version}
ant lib dir: ${ant.library.dir}
ant home: ${ant.home}
ant basedir: ${basedir}

== JAVA ======================
java home: ${java.home}
java version: ${java.runtime.version}
javadoc access: ${javadoc.level}
    	
== COMPILER OPTIONS ==========
source: ${source.ver}
target: ${target.ver}
debug(-g): ${debug.flag}
deprecation: ${deprecation.flag}
Xlint warn: ${xlint}         
    		
== PROPERTIES ===============
libdir: ${libdir}
docdir: ${docdir}
javadoc.dir: ${javadoc.dir}
mainclass: ${app.mainclass}
    		
        </echo>
	</target>


	<!-- perform all operations to build the entire project -->
	<target name="build" description="Build all class files in the edu tree">
		<!-- compile in place all class files in the base directory -->
		<javac srcdir="${basedir}/edu/"
               source="${source.ver}" 
               target="${target.ver}"
               debug="${debug.flag}"
               deprecation="${deprecation.flag}">
            <compilerarg value="-Xlint:${xlint}"/>         
			<classpath refid="app.classpath"/>
		</javac> 
	</target>

	<!-- generate the javadoc documentation -->
	<target name="javadoc" description="Compile JavaDoc for all source in the edu tree">
		<javadoc destdir="${javadoc.dir}" 
	            source="${source.ver}"
	            access="${javadoc.level}"
	            use="true" 
	            notree="false" 
	            nonavbar="false" 
	            noindex="false" 
	            splitindex="true" 
	            author="true" 
	            version="true" 
	            nodeprecatedlist="false" 
	            nodeprecated="false" 
	            sourcepath="${basedir}/edu" 
	            breakiterator="yes"
	            doctitle="McIDAS-V Documentation">

			<packageset dir="${basedir}" defaultexcludes="yes">
				<include name="edu/**"/>
			</packageset>

			<link href="http://java.sun.com/products/java-media/3D/forDevelopers/J3D_1_3_API/j3dapi" />
			<link href="http://java.sun.com/j2se/1.5/docs/api" />
			<link href="http://www.unidata.ucar.edu/software/idv/docs/javadoc"/>

			<classpath refid="app.classpath"/>
		</javadoc>
	</target>

	<!-- create the startup manager -->
	<target name="startupmanager" depends="clean, build" description="Builds McV and packages the Startup Manager.">
		<tstamp prefix="jar"/>
		<mkdir dir="${distdir}"/>
		<jar destfile="${distdir}/${app.smjar}">
			<fileset dir="${basedir}">
				<patternset refid="startupmanager.includes"/>
			</fileset>			
			<manifest>
				<attribute name="Build-By" value="${user.name}"/>
				<attribute name="Build-Date" value="${jar.TODAY} ${jar.TSTAMP}"/>
				<attribute name="Main-Class" value="${app.smclass}"/>
			</manifest>
		</jar>		
	</target>
	
	<!-- jar the binaries -->
	<target name="jar.base" description="create the application jar">
		<mkdir dir="${distdir}"/>
        <tstamp prefix="jar"/>
		<jar destfile="${distdir}/${app.jarname}">
			<fileset dir="${basedir}">
				<patternset refid="jar.includes"/>
			</fileset>
			<manifest>
				<attribute name="Build-By" value="${user.name}"/>
                <attribute name="Build-Date" value="${jar.TODAY} ${jar.TSTAMP}"/>
                <attribute name="Class-Path" value="idv.jar"/>
				<attribute name="Main-Class" value="${app.mainclass}"/>
			</manifest>
		</jar>
	</target>

	<!-- jar the binaries -->
	<target name="jar" depends="clean, build, copy.build.props, jar.base" 
		    description="Clean, build then create the application jar"/>
	
	<!-- jar the binaries -->
	<target name="jar.nightly" depends="clean, build, copy.nightly.props, jar.base" 
		    description="Clean, build then create the nightly application jar"/>
	
	<!-- the storepass property must be set via the command line -->
    <target name="signjar" depends="jar" description="Create signed jar">
		<signjar jar="${distdir}/${app.jarname}" 
			alias="${keyalias}"
			keystore="${keystore}"
			storepass="${storepass}"/>
	</target>
 
    <target name="singlejar" depends="clean, build" description="Make application jar with library dependancies included">
        <mkdir dir="${distdir}"/>
        <mkdir dir="${builddir}"/>
     
        <unzip dest="${builddir}">
            <fileset refid="idv.libs"/>
        </unzip>
     
        <!-- make sure custom visad class overwrite default ones -->   
        <unzip src="${libdir}/local-visad.jar" dest="${builddir}"/>
     
        <copy todir="${builddir}">
            <fileset dir="${basedir}">
                <patternset refid="jar.includes"/>
            </fileset>   
        </copy>   
        
        <tstamp prefix="jar"/>
        <jar destfile="${distdir}/${app.jarname}" basedir="${builddir}">
            <manifest>
                <attribute name="Build-By" value="${user.name}"/>
                <attribute name="Build-Date" value="${jar.TODAY} ${jar.TSTAMP}"/>
                <attribute name="Main-Class" value="${app.mainclass}"/>
            </manifest>
        </jar>
    </target>   

    <target name="jardoc" depends="javadoc" description="Jar the documentation">
        <mkdir dir="${distdir}"/>
        <jar destfile="${distdir}/${doc.jarname}" basedir="${docdir}">
            <manifest>
                <attribute name="Build-By" value="${user.name}"/>
            </manifest>
        </jar>
    </target>

	
	<target name="dist" depends="jar, jardoc, startupmanager, signjar" description="Generate distribution products"/>
	
	<!-- delete everything we created -->
	<target name="clean" description="Delete all class files in the edu tree and remove created directories">
		<delete dir="${distdir}" failonerror="false"/>
		<delete dir="${javadoc.dir}" failonerror="false"/>
        <delete dir="${builddir}" failonerror="false"/>      
		<delete failonerror="false">
			<fileset dir="${basedir}/edu" includes="**/*.class"/>
		</delete>
		<delete file="${build.props}" failonerror="false"/>
	</target>




	<!-- run the McIDAS-V application -->
	<target name="run" depends="jar" description="Run the application from a fresh distribution JAR">
		<java classname="${app.mainclass}" fork="true" maxmemory="${run.maxheap}">
			<classpath>
				<path refid="app.classpath"/>
				<pathelement location="${distdir}/${app.jarname}"/>
			</classpath>
		</java>
	</target>



    <!-- targets for building the nightly build -->
    <target name="cvsupdate">
        <cvs cvsRoot="${cvsroot}"
             cvsRsh="${cvsrsh}"
             failonerror="true"
             dest="${basedir}">
            <commandline>
                <argument value="update"/>
                <argument value="-d"/>
                <argument value="-C"/>
            </commandline>   
        </cvs>
    </target>
	
	
	<target name="copy.build.props">
        <tstamp>
            <format property="build.date" pattern="yyyy-MM-dd HH:mm" timezone="UTC"/>
        </tstamp>
        <copy file="${ver.props}" tofile="${build.props}" overwrite="true">
            <filterset>
            	<filter token="DATE" value="${build.date}"/>
                <filter token="NIGHTLY" value=""/>
            </filterset>   
        </copy> 
	</target>
	
	
	<target name="copy.nightly.props">
        <tstamp>
            <format property="build.date" pattern="yyyy-MM-dd HH:mm" timezone="UTC"/>
        </tstamp>
        <copy file="${ver.props}" tofile="${build.props}" overwrite="true">
            <filterset>
            	<filter token="DATE" value="${build.date}"/>
                <filter token="NIGHTLY" value="(nightly)"/>
            </filterset>   
        </copy> 
	</target>
	
	
    <target name="nightly" 
            depends="cvsupdate, jar.nightly, jardoc, startupmanager, build.webstart" 
            description="generate a nightly build">
	</target>

	
	
	<target name="build.idv" description="build idv libs">
	    <ant antfile="${idv.buildfile}" inheritAll="false" target="idvjar"/>
	    <ant antfile="${idv.buildfile}" inheritAll="false" target="auxdatajar"/>
	</target>
	
	
	
	<target name="build.webstart" description="make the webstart distrubution">

		<!-- make sure the password was provided -->
		<fail unless="storepass" message="'storepass' property not set"/>

		<!-- if the jar is not up to date or does not exist, fail. -->
		<condition property="dist.exists">
			<or>
				<uptodate targetfile="${distdir}/${app.jarname}">
					<srcfiles dir="${basedir}/edu" includes="**/*"/>
				</uptodate>
				<available file="${distdir}"/>
				<available file="${distdir}/${app.jarname}"/>
			</or>
		</condition>
		<fail unless="dist.exists" message="make jar file first"/>
		
		<!-- just the IDV and McV jars. Do not delete the java3d jars -->
		<delete>
			<fileset dir="${webstart.dir}/McV" includes="**/*.jar"/>
		</delete>
		
	    <!-- copy jars -->
	    <copy todir="${webstart.dir}/McV">
	        <fileset refid="idv.libs"/>
	    	<fileset dir="${distdir}">
	    		<filename name="${app.jarname}"/>
	    	</fileset>
	    </copy>
		
		<!-- sign everything. It should be ok to sign jars that are already signed -->
	    <signjar keystore="${keystore}" storepass="${storepass}" alias="${keyalias}">
	        <path>
	            <fileset dir="${webstart.dir}" includes="**/*.jar"/>
	        </path>
	    </signjar>
	</target>

</project>
