<?xml version="1.0"?>

<!-- $Id$ -->

<project name="mcidasv" default="info">

	<!-- directory definitions -->
	<property name="base.dir" location="."/>
    <property name="build.dir" location="${base.dir}/build"/>
	<property name="dist.dir" location="${base.dir}/dist"/>
	<property name="lib.dir" location="${base.dir}/../idv/lib"/>
    <property name="resource.dir" location="${base.dir}/edu/wisc/ssec/mcidasv/resources"/>
	<property name="release.dir" location="${base.dir}/release"/>
	<property name="tools.dir" location="${base.dir}/tools"/>
	<property name="webstart.dir" location="${release.dir}/webstart"/>
	<property name="sm.dir" location="${base.dir}/edu/wisc/ssec/mcidasv/startupmanager"/>
	<property name="doc.dir" location="${base.dir}/docs"/>
	<property name="javadoc.dir" location="${doc.dir}/javadoc"/>
	<property name="userguide.dir" location="${doc.dir}/userguide"/>
	
	<!-- attempt to load the version property file -->
	<property file="${resource.dir}/version.properties"/>
	<property name="media.dir" location="${base.dir}/../install4j/media"/>
	<property name="source.file" value="McIDAS-V_${mcidasv.version.major}.${mcidasv.version.minor}${mcidasv.version.release}_source.jar"/>
	
	<!-- binary file definitions -->
	<property name="java.bin" location="../jdk1.5.0_12/bin/java"/>
	<property name="jhindexer.bin" location="../jh2.0/javahelp/bin/jhindexer"/>
	<property name="install4jc.bin" location="${base.dir}/../install4j/bin/install4jc"/>

	<!-- required library jarfile names -->
	<property name="visad.jar" value="visad.jar"/>
	<property name="idv.jar" value="idv.jar"/>

	<!-- property file names -->
    <property name="ver.props" value="${resource.dir}/version.properties"/>
    <property name="build.props" value="${resource.dir}/build.properties"/>
    
	<!-- jarfile names -->
	<property name="app.jarname" value="mcidasv.jar"/>
    <property name="javadoc.jarname" value="mcv_javadoc.jar"/>
    <property name="userguide.jarname" value="mcv_userguide.jar"/>
	<property name="source.jarname" value="mcv_source.jar"/>

	<!-- jar signing -->
	<property name="key.store" location="${release.dir}/mcv-keystore"/>
	<property name="key.alias" value="McIDAS-V"/>
	
	<!-- main class for jar and run targets -->
	<property name="app.mainclass" value="edu.wisc.ssec.mcidasv.McIDASV"/>

	<!-- main class for Startup Manager -->
	<property name="app.smclass" value="edu.wisc.ssec.mcidasv.startupmanager.StartupManager"/>
	<property name="app.smjar" value="startupmanager.jar"/>

	<!-- Various properties for the Jython console. -->
	<property name="jython.class" value="edu.wisc.ssec.mcidasv.jython.Console"/>
	<property name="jython.jarfile" value="console.jar"/>
	<property name="jython.dir" value="${base.dir}/edu/wisc/ssec/mcidasv/jython"/>
	<property name="jython.lib" value="${lib.dir}/jython.jar"/>

	<!-- run target options -->
	<property name="run.typicalheap" value="256m"/>
	<property name="run.largeheap" value="768m"/>

    <!-- nightly build props -->
    <property name="cvs.root" value="${user.name}@cvs.ssec.wisc.edu:/cvsroot"/>
    <property name="cvs.rsh" value="ssh"/>

	<!-- compiler options -->
	<property name="debug.flag" value="true"/>
	<property name="deprecation.flag" value="false"/>
	<property name="source.ver" value="1.5"/>
	<property name="target.ver" value="1.5"/>
	
    <!-- which warnings to show, use javac -X for help -->
    <property name="xlint" value="deprecation"/>

	<!-- javadoc options -->
	<property name="javadoc.level" value="private"/>

	<!-- specifies the current version of IDV jars -->
	<property name="idv.ftp" value="ftp.unidata.ucar.edu" />
	<property name="idv.ftp.fn" value="idv_jars_2.6a2.zip" />
	<property name="idv.ftp.path" value="pub/idv/nightly" />

	<!-- list of IDV jars -->
    <fileset id="idv.libs" dir="${lib.dir}">
        <include name="auxdata.jar"/>
        <include name="local-visad.jar"/>
        <include name="visad.jar"/>
        <include name="jython.jar"/>
        <include name="external.jar"/>
        <include name="ncIdv.jar"/>
        <include name="idv.jar"/>
    </fileset>
    
	<!-- shared classpath -->
	<path id="app.classpath">
		<pathelement location="${base.dir}"/>
		<fileset refid="idv.libs"/>
	</path>

	<!-- files to include in application jar -->
	<patternset id="jar.includes">
		<include name="ucar/**/*.class"/>
		<include name="edu/**/*.class"/>
		<include name="edu/**/resources/**/*"/>
		<include name="edu/**/images/**/*"/>
	</patternset>
	
	<!-- similarly, files to include in the startup manager jar. -->
	<patternset id="startupmanager.includes">
		<include name="ucar/unidata/util/*.class"/>
		<include name="edu/**/startupmanager/*.class"/>
		<include name="edu/wisc/ssec/mcidasv/resources/icons/prefs/*"/>
		<include name="edu/wisc/ssec/mcidasv/Constants.class"/>
		<include name="edu/**/images/mcidasv_logo.gif"/>
	</patternset>

	<!-- just print out some of the setting for this build file -->
	<target name="info" description="Print various significant property values">
		<echo>
== ANT ======================= 
ant java version: ${ant.java.version}
ant lib dir: ${ant.library.dir}
ant home: ${ant.home}
ant basedir: ${base.dir}

== JAVA ======================
java home: ${java.home}
java version: ${java.runtime.version}
javadoc access: ${javadoc.level}
    	
== COMPILER OPTIONS ==========
source: ${source.ver}
target: ${target.ver}
debug(-g): ${debug.flag}
deprecation: ${deprecation.flag}
Xlint warn: ${xlint}         
    		
== PROPERTIES ===============
libdir: ${lib.dir}
javadoc: ${javadoc.dir}
userguide: ${userguide.dir}
mainclass: ${app.mainclass}
    		
        </echo>
	</target>

	<!-- perform all operations to build the entire project -->
	<target name="build" description="Build all class files in the edu tree">
		<!-- compile in place all class files in the base directory -->
		<javac srcdir="${base.dir}"
               source="${source.ver}" 
               target="${target.ver}"
               debug="${debug.flag}"
               deprecation="${deprecation.flag}">
            <compilerarg value="-Xlint:${xlint}"/>
			<classpath refid="app.classpath"/>
		</javac> 
	</target>

	<!-- create the startup manager -->
	<target name="startupmanager" depends="clean, build" description="Builds McV and packages the Startup Manager.">
		<tstamp prefix="jar"/>
		<mkdir dir="${dist.dir}"/>
		<jar destfile="${dist.dir}/${app.smjar}">
			<fileset dir="${base.dir}">
				<patternset refid="startupmanager.includes"/>
			</fileset>
			<manifest>
				<attribute name="Build-By" value="${user.name}"/>
				<attribute name="Build-Date" value="${jar.TODAY} ${jar.TSTAMP}"/>
				<attribute name="Class-Path" value="idv.jar mcv_userguide.jar"/>
				<attribute name="Main-Class" value="${app.smclass}"/>
			</manifest>
		</jar>
	</target>

	<!-- Cleans and builds only the code associated with the Jython console. -->
	<target name="build.jython" description="Cleans and builds only the code associated with the Jython console.">
		<delete failonerror="false">
			<fileset dir="${jython.dir}" includes="**/*.class"/>
		</delete>
		<javac classpath="${jython.lib}"
			   debug="${debug.flag}"
			   deprecation="${deprecation.flag}"
			   source="${source.ver}"
			   srcdir="${jython.dir}" 
			   target="${target.ver}">
			<compilerarg value="-Xlint"/>
		</javac>
	</target>

	<!-- Creates the standalone Jython console JAR. -->
	<target name="jar.jython" depends="build.jython" description="Creates the standalone Jython console JAR.">
		<mkdir dir="${dist.dir}"/>
		<tstamp prefix="jar"/>
		<jar destfile="${dist.dir}/${jython.jarfile}">
			<fileset dir="${base.dir}">
				<include name="edu/wisc/ssec/mcidasv/jython/**/*.class"/>
			</fileset>
			<manifest>
				<attribute name="Build-By" value="${user.name}"/>
				<attribute name="Build-Date" value="${jar.TODAY} ${jar.TSTAMP}"/>
				<attribute name="Class-Path" value="jython.jar"/>
				<attribute name="Main-Class" value="${jython.class}"/>
			</manifest>
		</jar>
	</target>

	<!-- jar the binaries -->
	<target name="jar.base" description="Create the application jar">
		<mkdir dir="${dist.dir}"/>
        <tstamp prefix="jar"/>
		<jar destfile="${dist.dir}/${app.jarname}">
			<fileset dir="${base.dir}">
				<patternset refid="jar.includes"/>
			</fileset>
			<manifest>
				<attribute name="Build-By" value="${user.name}"/>
                <attribute name="Build-Date" value="${jar.TODAY} ${jar.TSTAMP}"/>
                <attribute name="Class-Path" value="idv.jar mcv_userguide.jar"/>
				<attribute name="Main-Class" value="${app.mainclass}"/>
			</manifest>
		</jar>
	</target>

	<!-- jar the binaries -->
	<target name="jar" depends="clean, auxdata.nodocs, build, copy.build.props, jar.base" 
		    description="Clean, build then create the application jar"/>
	
	<!-- jar the binaries -->
	<target name="jar.nightly" depends="clean, auxdata.nodocs, build, copy.nightly.props, jar.base" 
		    description="Clean, build then create the nightly application jar"/>
	
	<!-- the storepass property must be set via the command line -->
    <target name="signjar" depends="jar" description="Create signed jar">
		<signjar jar="${dist.dir}/${app.jarname}" 
			alias="${key.alias}"
			keystore="${key.store}"
			storepass="${storepass}"/>
		<signjar jar="${dist.dir}/mcv_userguide.jar" 
			alias="${key.alias}"
			keystore="${key.store}"
			storepass="${storepass}"/>
	</target>
 
	<!-- include dependencies in single jar -->
    <target name="singlejar" depends="clean, auxdata.nodocs, build" description="Make application jar with library dependancies included">
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${build.dir}"/>
     
        <unzip dest="${build.dir}">
            <fileset refid="idv.libs"/>
        </unzip>
     
        <!-- make sure custom visad class overwrite default ones -->   
        <unzip src="${lib.dir}/local-visad.jar" dest="${build.dir}"/>
     
        <copy todir="${build.dir}">
            <fileset dir="${base.dir}">
                <patternset refid="jar.includes"/>
            </fileset>   
        </copy>   
        
        <tstamp prefix="jar"/>
        <jar destfile="${dist.dir}/${app.jarname}" basedir="${build.dir}">
            <manifest>
                <attribute name="Build-By" value="${user.name}"/>
                <attribute name="Build-Date" value="${jar.TODAY} ${jar.TSTAMP}"/>
                <attribute name="Main-Class" value="${app.mainclass}"/>
            </manifest>
        </jar>
    </target>

	<!-- create distribution product -->
	<target name="dist"
			depends="jar, startupmanager, javadoc.jar, userguide.jar, packsource"
			description="Generate distribution products"/>
	
	<!-- delete everything we created -->
	<target name="clean" description="Delete all class files in the edu tree and remove created directories">
		<delete dir="${dist.dir}" failonerror="false"/>
		<delete dir="${javadoc.dir}" failonerror="false"/>
        <delete dir="${build.dir}" failonerror="false"/>      
		<delete failonerror="false">
			<fileset dir="${base.dir}/edu" includes="**/*.class"/>
		</delete>
		<delete failonerror="false">
			<fileset dir="${base.dir}/ucar" includes="**/*.class"/>
		</delete>
		<delete file="${build.props}" failonerror="false"/>
	</target>

	<!-- run McIDAS-V with lots of memory. -->
	<target name="runbigmem" depends="jar" description="Run the application from a fresh JAR and large heap">
		<java classname="${app.mainclass}" fork="true" maxmemory="${run.largeheap}">
			<classpath>
				<path refid="app.classpath"/>
				<pathelement location="${dist.dir}/${app.jarname}"/>
			</classpath>
		</java>
	</target>
	
	<!-- run the McIDAS-V application -->
	<target name="run" depends="jar" description="Run the application from a fresh distribution JAR">
		<java classname="${app.mainclass}" fork="true" maxmemory="${run.typicalheap}">
			<classpath>
				<path refid="app.classpath"/>
				<pathelement location="${dist.dir}/${app.jarname}"/>
			</classpath>
		</java>
	</target>

    <!-- targets for building the nightly & webstart -->
	<target name="nightly"
			depends="cvsupdate, jar.nightly, startupmanager, javadoc.jar, userguide.jar, source, build.webstart" 
            description="GenerateS nightly build"/>
	
    <target name="cvsupdate">
        <cvs cvsRoot="${cvs.root}"
             cvsRsh="${cvs.rsh}"
             failonerror="true"
             dest="${base.dir}">
            <commandline>
                <argument value="update"/>
                <argument value="-d"/>
                <argument value="-C"/>
            </commandline>   
        </cvs>
    </target>
	
	<target name="copy.build.props">
        <tstamp>
            <format property="build.date" pattern="yyyy-MM-dd HH:mm" timezone="UTC"/>
        </tstamp>
        <copy file="${ver.props}" tofile="${build.props}" overwrite="true">
            <filterset>
            	<filter token="DATE" value="${build.date}"/>
                <filter token="NIGHTLY" value=""/>
            </filterset>   
        </copy> 
	</target>
	
	<target name="copy.nightly.props">
        <tstamp>
            <format property="build.date" pattern="yyyy-MM-dd HH:mm" timezone="UTC"/>
        </tstamp>
        <copy file="${ver.props}" tofile="${build.props}" overwrite="true">
            <filterset>
            	<filter token="DATE" value="${build.date}"/>
                <filter token="NIGHTLY" value="(nightly)"/>
            </filterset>   
        </copy> 
	</target>
	
	<target name="build.webstart" description="Make the webstart distrubution">

		<!-- make sure the password was provided -->
		<fail unless="storepass" message="'storepass' property not set"/>

		<!-- if the jar is not up to date or does not exist, fail. -->
		<condition property="dist.exists">
			<or>
				<uptodate targetfile="${dist.dir}/${app.jarname}">
					<srcfiles dir="${base.dir}/edu" includes="**/*"/>
				</uptodate>
				<available file="${dist.dir}"/>
				<available file="${dist.dir}/${app.jarname}"/>
			</or>
		</condition>
		<fail unless="dist.exists" message="make jar file first"/>
		
		<!-- delete the IDV and McV jars -->
		<delete>
			<fileset dir="${webstart.dir}" includes="**/*.jar"/>
		</delete>
		
	    <!-- copy jars -->
	    <copy todir="${webstart.dir}">
	        <fileset refid="idv.libs"/>
	    	<fileset dir="${dist.dir}">
	    		<include name="*.jar"/>
	    	</fileset>
	    </copy>
		
		<!-- sign everything. It should be ok to sign jars that are already signed -->
	    <signjar keystore="${key.store}" storepass="${storepass}" alias="${key.alias}">
	        <path>
	            <fileset dir="${webstart.dir}" includes="**/*.jar"/>
	        </path>
	    </signjar>
	</target>
	
	<!-- get latest IDV jars from Unidata FTP -->
	<target name="getidvjars" description="Download idv jars and extract to libdir">
		<exec executable="${basedir}/tools/get_idv_latest.sh" dir="${basedir}/tools"/>
<!--
		<get src="ftp://${idv.ftp}/${idv.ftp.path}/${idv.ftp.fn}" 
			dest="${base.dir}/${idv.ftp.fn}"
			verbose="off" />
		<unzip src="${base.dir}/${idv.ftp.fn}" dest="${lib.dir}"/>
		<delete file="${base.dir}/${idv.ftp.fn}"/>
-->
	</target>
	
	<!-- generate the javadoc documentation -->
	<target name="javadoc" description="Compile JavaDoc for all source in the edu tree">
		<javadoc destdir="${javadoc.dir}" 
	            source="${source.ver}"
	            access="${javadoc.level}"
	            use="true" 
	            notree="false" 
	            nonavbar="false" 
	            noindex="false" 
	            splitindex="true" 
	            author="true" 
	            version="true" 
	            nodeprecatedlist="false" 
	            nodeprecated="false"
	            breakiterator="yes"
	            doctitle="McIDAS-V Java Documentation">
			<!-- sourcepath="${base.dir}/edu" -->

			<packageset dir="${base.dir}" defaultexcludes="yes">
				<include name="edu/**"/>
			</packageset>

			<link href="http://java.sun.com/products/java-media/3D/forDevelopers/J3D_1_3_API/j3dapi" />
			<link href="http://java.sun.com/j2se/1.5/docs/api" />
			<link href="http://www.unidata.ucar.edu/software/idv/docs/javadoc"/>

			<classpath refid="app.classpath"/>
		</javadoc>
	</target>

	<!-- jar up the javadoc -->
    <target name="javadoc.jar" depends="javadoc" description="Jar the javadoc">
        <mkdir dir="${dist.dir}"/>
        
		<tstamp prefix="jar"/>
        <jar destfile="${dist.dir}/${javadoc.jarname}">
        	<fileset dir="${base.dir}">
        		<include name="docs/javadoc/**"/>
        	</fileset>
            <manifest>
                <attribute name="Build-By" value="${user.name}"/>
                <attribute name="Build-Date" value="${jar.TODAY} ${jar.TSTAMP}"/>
            </manifest>
        </jar>
    </target>

	<!-- jar up the userguide -->
	<target name="userguide.jar" description="Jar the userguide">
	
		<!-- build the userguide index -->
		<exec failifexecutionfails="false"
			dir="${userguide.dir}"
			executable="${jhindexer.bin}">
			<arg line="${java.bin} -logfile jh.log processed"/>
		</exec>

		<tstamp prefix="jar"/>
		<jar destfile="${dist.dir}/${userguide.jarname}">
			<fileset dir="${base.dir}">
				<include name="docs/userguide/**"/>
			</fileset>
			<manifest>
				<attribute name="Build-By" value="${user.name}"/>
				<attribute name="Build-Date" value="${jar.TODAY} ${jar.TSTAMP}"/>
			</manifest>
		</jar>
	</target>
	
	<!-- remove the docs/ directory from auxdata.jar -->
	<target name="auxdata.nodocs" description="Delete docs from auxdata.jar">
		<mkdir dir="${lib.dir}/tmp"/>
		<unzip src="${lib.dir}/auxdata.jar" dest="${lib.dir}/tmp"/>
		
		<delete dir="${lib.dir}/tmp/auxdata/docs" failonerror="false"/>
		<delete file="${lib.dir}/auxdata.jar" failonerror="false"/>
		
		<jar destfile="${lib.dir}/auxdata.jar" basedir="${lib.dir}/tmp"/>
		<delete dir="${lib.dir}/tmp" failonerror="false"/>
	</target>
	
	<!-- jar up the source files -->
	<target name="source" description="Jar the source">
		<jar destfile="${dist.dir}/${source.jarname}" basedir="${base.dir}" compress="true">
		
			<include name="build.xml"/>
			
			<include name="edu/**"/>
			<exclude name="edu/**/*.class"/>
			<exclude name="edu/**/CVS/**"/>

			<include name="ucar/**"/>
			<exclude name="ucar/**/*.class"/>
			<exclude name="ucar/**/CVS/**"/>
			
			<include name="release/licenses/**"/>

        </jar>
	</target>
	
	<!-- cheat and move it to the install4j/media directory -->
	<target name="packsource" depends="source" description="Package the source">
		<copy file="${dist.dir}/${source.jarname}" tofile="${media.dir}/${source.file}" failonerror="false"/>
	</target>

	<!-- make the installers -->
	<target name="installers" description="Build the installers with installerjc">
		<exec dir="${release.dir}" executable="${install4jc.bin}">
			<arg line="mcidasv.install4j"/>
		</exec>
	</target>
	
</project>
